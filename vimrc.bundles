if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

call plug#begin('~/.vim/bundle')

Plug 'airblade/vim-gitgutter' " shows git changes in the gutter
" Plug 'christoomey/vim-run-interactive' " :RunInteractive
Plug 'christoomey/vim-tmux-navigator' " tmux integration
Plug 'ctrlpvim/ctrlp.vim' " fuzzy finder
Plug 'dense-analysis/ale'
" Plug 'editorconfig/editorconfig-vim' " obeys editorconfig
" Plug 'godlygeek/tabular' " text alignment
" Plug 'hashivim/vim-terraform' " terraform
Plug 'itchyny/lightline.vim' " status line
" Plug 'kana/vim-operator-user'
Plug 'maximbaz/lightline-ale'
Plug 'pbrisbin/vim-mkdir' " mkdir
Plug 'preservim/vim-markdown' " markdown
Plug 'rhysd/conflict-marker.vim'
Plug 'rust-lang/rust.vim' " rust
Plug 'tpope/vim-commentary' " comments
Plug 'tpope/vim-dispatch' " async tasks
Plug 'tpope/vim-eunuch' " unix commands
Plug 'tpope/vim-fugitive' " git
Plug 'tpope/vim-projectionist' " project support
Plug 'tpope/vim-unimpaired' " shortcuts [q ]q
Plug 'tpope/vim-vinegar' " enhancements to netrw integrations
" Plug 'pangloss/vim-javascript'
" Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
" Plug 'jparise/vim-graphql'
Plug 'sheerun/vim-polyglot'

if filereadable(expand("~/.vimrc.bundles.private"))
  source ~/.vimrc.bundles.private
endif

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
